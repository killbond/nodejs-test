#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var io = require('socket.io');
var debug = require('debug')('nodejs-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = nconf.get('port');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


io.on('connection', function (socket) {

    socket.on('connected', function (data) {
        socket.emit("connected", data);
    });

    socket.on('message', function (data, callback) {
        console.log(data);
        socket.broadcast.emit("message", data);
        callback(data);
    });
});
