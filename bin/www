#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var io = require('socket.io');
var debug = require('debug')('nodejs-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = nconf.get('port');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var order = null,
    status = null,
    users = {},
    statuses = ["new", "prepared"];

function find(array, value) {
    for(var i=0; i<array.length; i++) {
        if (array[i] == value) return i;
    }
    return -1;
}


io.on('connection', function (socket) {

    if(order === null){
        order++;
        status = statuses[0];
    }

    socket.on('connected', function (data) {
        console.log('___________________________________');
        for(var usr in users)
        {
            console.log(usr + ':' + users[usr]);
            if(usr === data.sid)
            {
                users[data.sid] = false;
            }
        }

        if(users[data.sid] !== false)
        {
            users[data.sid] = true;
        }

        data = {
            ord: order,
            status: status
        };
        data[data.sid] = users[data.sid];
        socket.emit("new", data);
    });

    socket.on('prepare', function (data, callback) {
        if(!users[data.sid]) return;

        console.log('___________________________________');
        for(var usr in users)
        {
            console.log(usr + ':' + users[usr]);
            if(users[usr] === true)
            {
                users[usr] = false;
            }
            else
            {
                users[usr] = true;
            }
        }

        var i = find(statuses, data.status);
        if(typeof statuses[i+1] !== "undefined") {
            data.status = statuses[i+1];
        } else {
            order++;
            data.ord = order;
            data.status = statuses[0];
        }
        data[data.sid] = users[data.sid];
        socket.broadcast.emit("new", data);
        callback(data);
    });
});
